name: EasyTier Docker Build (AMD64)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'EasyTier version to build (e.g. 2.4.2)'
        type: string
        required: true

env:
  DOCKERHUB_REPO: aoxijy/easytier-web

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Prepare artifacts
        run: |
          BUILD_VERSION="${{ github.event.inputs.version }}"
          echo "Building version: $BUILD_VERSION"
          URL="https://github.com/EasyTier/EasyTier/releases/download/v${BUILD_VERSION}/easytier-linux-x86_64-v${BUILD_VERSION}.zip"
          wget -O easytier.zip "$URL"
          unzip easytier.zip -d easytier-unpacked

          cd easytier-unpacked
          if [ -d "easytier-linux-x86_64" ]; then
            mv easytier-linux-x86_64 easytier-${BUILD_VERSION}
          fi
          cd easytier-${BUILD_VERSION}

          chmod +x easytier-core
          chmod +x easytier-web-embed

          mkdir -p docker-context
          
          # 复制应用程序文件
          cp easytier-core docker-context/
          cp easytier-web-embed docker-context/
          
          # 复制Web资源
          if [ -d "web" ]; then
            cp -r web docker-context/
          else
            echo "警告：未找到web目录，Web界面可能无法正常工作"
            mkdir -p docker-context/web
          fi
          
          # 生成优化的启动脚本 start.sh
          echo '#!/bin/sh' > docker-context/start.sh
          echo 'set -e' >> docker-context/start.sh
          echo '' >> docker-context/start.sh
          echo '# 设置默认值' >> docker-context/start.sh
          echo 'CORE_PORT=${ET_CORE_PORT:-11010}' >> docker-context/start.sh
          echo 'WG_PORT=${ET_WG_PORT:-11011}' >> docker-context/start.sh
          echo 'WS_PORT=${ET_WS_PORT:-11012}' >> docker-context/start.sh
          echo 'CONFIG_PORT=${ET_CONFIG_PORT:-22020}' >> docker-context/start.sh
          echo 'API_PORT=${ET_API_PORT:-11211}' >> docker-context/start.sh
          echo 'WEB_PORT=${ET_WEB_PORT:-8080}' >> docker-context/start.sh
          echo 'NETWORK_NAME=${ET_NETWORK_NAME:-default}' >> docker-context/start.sh
          echo 'NETWORK_SECRET=${ET_NETWORK_SECRET:-}' >> docker-context/start.sh
          echo 'CONFIG_PROTOCOL=${ET_CONFIG_PROTOCOL:-udp}' >> docker-context/start.sh
          echo 'DB_PATH=${ET_DB:-/opt/ct/easytier.db}' >> docker-context/start.sh
          echo '' >> docker-context/start.sh
          echo '# API主机配置' >> docker-context/start.sh
          echo 'if [ -n "$ET_API_HOST" ]; then' >> docker-context/start.sh
          echo '  API_HOST="$ET_API_HOST"' >> docker-context/start.sh
          echo 'else' >> docker-context/start.sh
          echo '  API_HOST="http://localhost:$API_PORT"' >> docker-context/start.sh
          echo 'fi' >> docker-context/start.sh
          echo '' >> docker-context/start.sh
          echo '# 创建数据库目录' >> docker-context/start.sh
          echo 'mkdir -p "$(dirname "$DB_PATH")"' >> docker-context/start.sh
          echo '' >> docker-context/start.sh
          echo '# 启动核心服务' >> docker-context/start.sh
          echo 'echo "启动 easytier-core..."' >> docker-context/start.sh
          echo 'args="--rpc-portal 0.0.0.0:$CORE_PORT"' >> docker-context/start.sh
          echo 'args="$args --vpn-portal 0.0.0.0:$CORE_PORT"' >> docker-context/start.sh
          echo 'args="$args --network-name \"$NETWORK_NAME\""' >> docker-context/start.sh
          echo 'args="$args --listeners tcp:$CORE_PORT"' >> docker-context/start.sh
          echo 'args="$args --listeners udp:$CORE_PORT"' >> docker-context/start.sh
          echo 'args="$args --listeners wg:$WG_PORT"' >> docker-context/start.sh
          echo 'args="$args --listeners ws:$WS_PORT"' >> docker-context/start.sh
          echo '' >> docker-context/start.sh
          echo '# 添加可选参数' >> docker-context/start.sh
          echo 'if [ -n "$NETWORK_SECRET" ]; then' >> docker-context/start.sh
          echo '  args="$args --network-secret \"$NETWORK_SECRET\""' >> docker-context/start.sh
          echo 'fi' >> docker-context/start.sh
          echo 'if [ -n "$ET_CONFIG_PROTOCOL" ]; then' >> docker-context/start.sh
          echo '  args="$args --config-protocol \"$CONFIG_PROTOCOL\""' >> docker-context/start.sh
          echo 'fi' >> docker-context/start.sh
          echo 'if [ -n "$ET_EXTERNAL_NODE" ]; then' >> docker-context/start.sh
          echo '  args="$args --external-node \"$ET_EXTERNAL_NODE\""' >> docker-context/start.sh
          echo 'fi' >> docker-context/start.sh
          echo 'if [ -n "$ET_PROXY_NETWORKS" ]; then' >> docker-context/start.sh
          echo '  args="$args --proxy-networks \"$ET_PROXY_NETWORKS\""' >> docker-context/start.sh
          echo 'fi' >> docker-context/start.sh
          echo 'if [ -n "$ET_EXIT_NODES" ]; then' >> docker-context/start.sh
          echo '  args="$args --exit-nodes $ET_EXIT_NODES"' >> docker-context/start.sh
          echo 'fi' >> docker-context/start.sh
          echo 'if [ -n "$ET_ENABLE_EXIT_NODE" ]; then' >> docker-context/start.sh
          echo '  args="$args --enable-exit-node"' >> docker-context/start.sh
          echo 'fi' >> docker-context/start.sh
          echo 'if [ -n "$ET_SOCKS5" ]; then' >> docker-context/start.sh
          echo '  args="$args --socks5 $ET_SOCKS5"' >> docker-context/start.sh
          echo 'fi' >> docker-context/start.sh
          echo 'if [ -n "$ET_COMPRESSION" ]; then' >> docker-context/start.sh
          echo '  args="$args --compression $ET_COMPRESSION"' >> docker-context/start.sh
          echo 'fi' >> docker-context/start.sh
          echo 'if [ -n "$ET_PRIVATE_MODE" ]; then' >> docker-context/start.sh
          echo '  args="$args --private-mode"' >> docker-context/start.sh
          echo 'fi' >> docker-context/start.sh
          echo '' >> docker-context/start.sh
          echo '# 设置数据库路径环境变量' >> docker-context/start.sh
          echo 'export EASYTIER_DB_PATH="$DB_PATH"' >> docker-context/start.sh
          echo '' >> docker-context/start.sh
          echo '# 执行命令' >> docker-context/start.sh
          echo 'eval "/usr/local/bin/easytier-core $args &"' >> docker-context/start.sh
          echo '' >> docker-context/start.sh
          echo '# 启动Web服务' >> docker-context/start.sh
          echo 'echo "启动 easytier-web-embed..."' >> docker-context/start.sh
          echo 'web_args="--web-server-port $WEB_PORT"' >> docker-context/start.sh
          echo 'web_args="$web_args --api-server-port $API_PORT"' >> docker-context/start.sh
          echo 'web_args="$web_args --config-server-port $CONFIG_PORT"' >> docker-context/start.sh
          echo 'web_args="$web_args --config-server-protocol $CONFIG_PROTOCOL"' >> docker-context/start.sh
          echo 'web_args="$web_args --api-host \"$API_HOST\""' >> docker-context/start.sh
          echo 'web_args="$web_args --db \"$DB_PATH\""' >> docker-context/start.sh
          echo '' >> docker-context/start.sh
          echo '# 添加可选参数' >> docker-context/start.sh
          echo 'if [ -n "$ET_GEOIP_DB" ]; then' >> docker-context/start.sh
          echo '  web_args="$web_args --geoip-db \"$ET_GEOIP_DB\""' >> docker-context/start.sh
          echo 'fi' >> docker-context/start.sh
          echo '' >> docker-context/start.sh
          echo '# 执行命令' >> docker-context/start.sh
          echo 'eval "/usr/local/bin/easytier-web-embed $web_args &"' >> docker-context/start.sh
          echo '' >> docker-context/start.sh
          echo '# 等待所有服务' >> docker-context/start.sh
          echo 'wait' >> docker-context/start.sh
          
          # 设置可执行权限
          chmod +x docker-context/start.sh
          
          # 列出构建上下文内容
          echo "构建上下文内容："
          ls -l docker-context

          cd ../..
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./easytier-unpacked/easytier-${{ github.event.inputs.version }}/docker-context
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_REPO }}:${{ github.event.inputs.version }}
            ${{ env.DOCKERHUB_REPO }}:latest
            
      - name: Test Docker image
        run: |
          # 测试镜像基本功能
          docker run --rm ${{ env.DOCKERHUB_REPO }}:${{ github.event.inputs.version }} /usr/local/bin/easytier-core --version
          docker run --rm ${{ env.DOCKERHUB_REPO }}:${{ github.event.inputs.version }} /usr/local/bin/easytier-web-embed --version
          
          # 测试启动脚本
          docker run --rm ${{ env.DOCKERHUB_REPO }}:${{ github.event.inputs.version }} cat /usr/local/bin/start.sh
          
          # 测试核心参数是否有效
          docker run --rm -e ET_NETWORK_NAME=test_network ${{ env.DOCKERHUB_REPO }}:${{ github.event.inputs.version }} \
            /usr/local/bin/easytier-core --help | grep -- '--network-name'
