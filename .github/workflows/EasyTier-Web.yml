name: EasyTier Docker Build (AMD64)

on:
  schedule:
    - cron: '0 0 * * *'  # 每天 UTC 00:00 自动检查
  workflow_dispatch:
    inputs:
      version:
        description: 'EasyTier version to build (e.g. 2.4.1)'
        type: string
        default: 'latest'
        required: false

env:
  DOCKERHUB_REPO: aoxijy/easytier-web

jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      build_version: ${{ steps.get-version.outputs.build_version }}
      should_build: ${{ steps.check-version.outputs.should_build }}
    steps:
      - name: Get latest version
        id: get-version
        run: |
          if [ -n "${{ inputs.version }}" ] && [ "${{ inputs.version }}" != "latest" ]; then
            BUILD_VERSION="${{ inputs.version }}"
          else
            # 获取最新版本（不带 "v" 前缀）
            BUILD_VERSION=$(curl -s https://api.github.com/repos/EasyTier/EasyTier/releases/latest | jq -r '.tag_name | sub("^v"; "")')
          fi
          echo "build_version=$BUILD_VERSION" >> $GITHUB_OUTPUT
          echo "Detected version: $BUILD_VERSION"

      - name: Check if build needed
        id: check-version
        run: |
          EXISTING_TAGS=$(curl -s "https://hub.docker.com/v2/repositories/${{ env.DOCKERHUB_REPO }}/tags/?page_size=100" | jq -r '.results[].name')
          if echo "$EXISTING_TAGS" | grep -q "${{ steps.get-version.outputs.build_version }}"; then
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "Version ${{ steps.get-version.outputs.build_version }} already exists"
          else
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "New version detected, building ${{ steps.get-version.outputs.build_version }}"
          fi

  build:
    needs: version-check
    if: ${{ needs.version-check.outputs.should_build == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Prepare artifacts
        run: |
          # 获取版本信息（不带 "v" 前缀）
          BUILD_VERSION=${{ needs.version-check.outputs.build_version }}
          if [ -n "${{ inputs.version }}" ] && [ "${{ inputs.version }}" != "latest" ]; then
            BUILD_VERSION="${{ inputs.version }}"
          fi
          
          echo "Building version: $BUILD_VERSION"
          echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_ENV
          
          # 下载官方 Release 压缩包（ZIP格式）
          echo "Downloading EasyTier release package..."
          URL="https://github.com/EasyTier/EasyTier/releases/download/v${BUILD_VERSION}/easytier-linux-x86_64-v${BUILD_VERSION}.zip"
          wget -O easytier.zip "$URL"
          
          # 解压ZIP文件
          unzip easytier.zip -d easytier-${BUILD_VERSION}
          
          # 进入解压目录
          cd "easytier-${BUILD_VERSION}"
          
          # 确保可执行权限
          chmod +x easytier-core
          
          # 创建Docker构建上下文
          mkdir -p docker-context
          cp easytier-core docker-context/
          cp -r web docker-context/web  # 复制预构建的web目录
          
          # 返回上级目录
          cd ..
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./easytier-${BUILD_VERSION}/docker-context
          file: ./Dockerfile  # 使用仓库根目录的Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_REPO }}:${{ env.BUILD_VERSION }}
            ${{ env.DOCKERHUB_REPO }}:latest
      
      - name: Send success notification
        if: success()
        run: |
          echo "✅ Successfully built and pushed ${{ env.DOCKERHUB_REPO }}:${{ env.BUILD_VERSION }}"
